# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
require 'pstore'

# ---- original file header ----
#
# @summary
#   Summarise what the function does here
#
Puppet::Functions.create_function(:'passgen') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    require 'chronic_duration'
    ChronicDuration.raise_exceptions = true

    filename = args[0]

    expire = nil
    if args[1]
        expire = ChronicDuration.parse(args[1])
    end

    if args[2]
        gen_value = args[2]
    else
        gen_value = `pwgen -s -1 14`.chomp
    end

    store = PStore.new(File.join(lookupvar('passgen::params::storage_path'), filename))
    pass = store.transaction { store['value'] }
    stored_expire = store.transaction { store['expire'] }
    expire_duration = store.transaction { store['expire_duration'] }
    if not pass or (expire and stored_expire ? Time.now.to_i > stored_expire : false) or expire_duration != args[1]
      pass = store.transaction do
          store['value'] = gen_value
      end
      store.transaction do
          store['expire'] = expire ? Time.now.to_i + expire : expire
          store['expire_duration'] = args[1]
      end
    end

    pass
  
  end
end
